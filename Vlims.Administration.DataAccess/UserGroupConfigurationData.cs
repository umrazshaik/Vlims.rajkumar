//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Administration.DataAccess
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Vlims.Common;
    using Vlims.Administration.Entities;
    using System.Xml.Serialization;
    using System.Data.SqlTypes;



    // Comment
    public static class UserGroupConfigurationData 
    {
        
       
        public static DataSet GetAllUserGroupConfiguration(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserGroupConfigurationConstants.USP_UserGroupConfiguration_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static DataSet GetUserGroupConfigurationByUgcid(string ugcid)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserGroupConfigurationConstants.USP_UserGroupConfiguration_PSY_GET, UserGroupConfigurationConstants.Ugcid, DbType.Int32, ugcid, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool SaveUserGroupConfiguration(UserGroupConfiguration userGroupConfiguration)
        {
            try
            {
                var serializer = new XmlSerializer(typeof(UserGroupConfiguration));
                // Create a StringWriter to hold the XML data
                var writer = new StringWriter();

                // Serialize the Person object to XML and write it to the StringWriter
                serializer.Serialize(writer, userGroupConfiguration);

                // Get the XML string from the StringWriter
                string xmlString = writer.ToString();
                string userstring = string.Join(",", userGroupConfiguration.users.Select(o => o.UserID));
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.Usermanagementid, Value = "1" });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.Usergroupname, Value = userGroupConfiguration.usergroupname });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.Code, Value = userGroupConfiguration.code });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.Users, Value = userstring });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = UserGroupConfigurationConstants.Totalusers, Value = userGroupConfiguration.totalusers });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.CreatedBy, Value = userGroupConfiguration.createdBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.ModifiedBy, Value = userGroupConfiguration.modifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.Xml, ParameterName = UserGroupConfigurationConstants.document, Value = xmlString });
                Object result = dataAccessHelper.ExecuteStoredProcedure(UserGroupConfigurationConstants.USP_UserGroupConfiguration_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool UpdateUserGroupConfiguration(UserGroupConfiguration userGroupConfiguration)
        {
            try
            {
                var serializer = new XmlSerializer(typeof(UserGroupConfiguration));
                // Create a StringWriter to hold the XML data
                var writer = new StringWriter();

                // Serialize the Person object to XML and write it to the StringWriter
                serializer.Serialize(writer, userGroupConfiguration);

                // Get the XML string from the StringWriter
                string xmlString = writer.ToString();
                string userstring = string.Join(",", userGroupConfiguration.users.Select(o => o.UserID));
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.Ugcid, Value = userGroupConfiguration.Ugcid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.Usermanagementid, Value = userGroupConfiguration.Usermanagementid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.Usergroupname, Value = userGroupConfiguration.usergroupname });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.Code, Value = userGroupConfiguration.code });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.Users, Value = userstring });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = UserGroupConfigurationConstants.Totalusers, Value = userGroupConfiguration.totalusers });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserGroupConfigurationConstants.ModifiedBy, Value = userGroupConfiguration.modifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.Xml, ParameterName = UserGroupConfigurationConstants.document, Value = xmlString });
                Object result = dataAccessHelper.ExecuteStoredProcedure(UserGroupConfigurationConstants.USP_UserGroupConfiguration_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteUserGroupConfigurationByUgcid(string ugcid)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(UserGroupConfigurationConstants.USP_UserGroupConfiguration_PSY_DELETE, UserGroupConfigurationConstants.Ugcid, DbType.Int32, ugcid, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteAllUserGroupConfiguration(List<int> ugcids)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(UserGroupConfigurationConstants.USP_UserGroupConfiguration_PSY_DELETE_ALL, UserGroupConfigurationConstants.Ugcid, DbType.String, string.Join(',',  ugcids), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static DataSet GetUserGroupConfigurationByUserManagementId(System.Int32? uMId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserGroupConfigurationConstants.USP_UserGroupConfiguration_PSY_By_UMId_GET, "@UMId", DbType.Int32, uMId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteUserGroupConfigurationByUserManagementId(System.Int32? uMId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(UserGroupConfigurationConstants.USP_UserGroupConfiguration_PSY_By_UMId_DELETE, "@UMId", DbType.Int32, uMId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
