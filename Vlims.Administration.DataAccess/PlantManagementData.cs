//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.Sheet1.Data
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Vlims.Common;
    using Vlims.Administration.Entities;



    // Comment
    public static class PlantManagementData 
    {
        
      
        public static DataSet GetAllPlantManagement(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(PlantManagementConstants.USP_PlantManagement_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static DataSet GetPlantManagementByPMId(string pMId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(PlantManagementConstants.USP_PlantManagement_PSY_GET, PlantManagementConstants.PMId, DbType.Int32, pMId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool SavePlantManagement(PlantManagement plantManagement)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.AdminManagerId, Value = plantManagement.AdminManagerId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.PlantName, Value = plantManagement.PlantName });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.PlantCode, Value = plantManagement.PlantCode });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.PlantAddress, Value = plantManagement.PlantAddress });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.Comments, Value = plantManagement.Comments });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.CreatedBy, Value = plantManagement.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.ModifiedBy, Value = plantManagement.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(PlantManagementConstants.USP_PlantManagement_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool UpdatePlantManagement(PlantManagement plantManagement)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int16, ParameterName = PlantManagementConstants.PMId, Value = plantManagement.PMId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.AdminManagerId, Value = plantManagement.AdminManagerId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.PlantName, Value = plantManagement.PlantName });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.PlantCode, Value = plantManagement.PlantCode });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.PlantAddress, Value = plantManagement.PlantAddress });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.Comments, Value = plantManagement.Comments });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = PlantManagementConstants.ModifiedBy, Value = plantManagement.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(PlantManagementConstants.USP_PlantManagement_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeletePlantManagementByPMId(string pMId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(PlantManagementConstants.USP_PlantManagement_PSY_DELETE, PlantManagementConstants.PMId, DbType.Int32, pMId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteAllPlantManagement(List<int> pMIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(PlantManagementConstants.USP_PlantManagement_PSY_DELETE_ALL, PlantManagementConstants.PMId, DbType.String, string.Join(',',  pMIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
