//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Data
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Vlims.Common;
    using Vlims.Administration.Entities;


    // Comment
    public static class DepartmentConfigurationData 
    {
        public static  DataSet GetAllDepartmentConfiguration(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DepartmentConfigurationConstants.USP_DepartmentConfiguration_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static DataSet GetDepartmentConfigurationByDPCFId(string dPCFId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DepartmentConfigurationConstants.USP_DepartmentConfiguration_PSY_GET, DepartmentConfigurationConstants.DPCFId, DbType.Int32, dPCFId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool SaveDepartmentConfiguration(DepartmentConfiguration departmentConfiguration)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.HierarchyManagementId, Value = departmentConfiguration.HierarchyManagementId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.DepartmentName, Value = departmentConfiguration.DepartmentName });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.DepartmentCode, Value = departmentConfiguration.DepartmentCode });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.Comments, Value = departmentConfiguration.Comments });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.CreatedBy, Value = departmentConfiguration.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.ModifiedBy, Value = departmentConfiguration.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DepartmentConfigurationConstants.USP_DepartmentConfiguration_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool UpdateDepartmentConfiguration(DepartmentConfiguration departmentConfiguration)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.DPCFId, Value = departmentConfiguration.DPCFId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.HierarchyManagementId, Value = departmentConfiguration.HierarchyManagementId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.DepartmentName, Value = departmentConfiguration.DepartmentName });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.DepartmentCode, Value = departmentConfiguration.DepartmentCode });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.Comments, Value = departmentConfiguration.Comments });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DepartmentConfigurationConstants.ModifiedBy, Value = departmentConfiguration.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DepartmentConfigurationConstants.USP_DepartmentConfiguration_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteDepartmentConfigurationByDPCFId(string dPCFId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DepartmentConfigurationConstants.USP_DepartmentConfiguration_PSY_DELETE, DepartmentConfigurationConstants.DPCFId, DbType.Int32, dPCFId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteAllDepartmentConfiguration(List<int> dPCFIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DepartmentConfigurationConstants.USP_DepartmentConfiguration_PSY_DELETE_ALL, DepartmentConfigurationConstants.DPCFId, DbType.String, string.Join(',',  dPCFIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static DataSet GetDepartmentConfigurationByHierarchyManagementId(System.Int32? hMId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DepartmentConfigurationConstants.USP_DepartmentConfiguration_PSY_By_HMId_GET, "@HMId", DbType.Int32, hMId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteDepartmentConfigurationByHierarchyManagementId(System.Int32? hMId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DepartmentConfigurationConstants.USP_DepartmentConfiguration_PSY_By_HMId_DELETE, "@HMId", DbType.Int32, hMId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
