//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Administration.DataAccess
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Vlims.Common;
    using Vlims.Administration.Entities;


    // Comment
    public static class AdimManagementData 
    {
        
        
        public static DataSet GetAllAdimManagement(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(AdimManagementConstants.USP_AdimManagement_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static DataSet GetAdimManagementByAMId(string aMId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(AdimManagementConstants.USP_AdimManagement_PSY_GET, AdimManagementConstants.AMId, DbType.Int32, aMId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool SaveAdimManagement(AdimManagement adimManagement)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.SecurityManagement, Value = adimManagement.SecurityManagement });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.HierarchyManagement, Value = adimManagement.HierarchyManagement });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.PlantManagement, Value = adimManagement.PlantManagement });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.UserManagement, Value = adimManagement.UserManagement });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.CreatedBy, Value = adimManagement.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.ModifiedBy, Value = adimManagement.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(AdimManagementConstants.USP_AdimManagement_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool UpdateAdimManagement(AdimManagement adimManagement)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.AMId, Value = adimManagement.AMId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.SecurityManagement, Value = adimManagement.SecurityManagement });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.HierarchyManagement, Value = adimManagement.HierarchyManagement });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.PlantManagement, Value = adimManagement.PlantManagement });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.UserManagement, Value = adimManagement.UserManagement });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdimManagementConstants.ModifiedBy, Value = adimManagement.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(AdimManagementConstants.USP_AdimManagement_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteAdimManagementByAMId(string aMId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(AdimManagementConstants.USP_AdimManagement_PSY_DELETE, AdimManagementConstants.AMId, DbType.Int32, aMId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteAllAdimManagement(List<int> aMIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(AdimManagementConstants.USP_AdimManagement_PSY_DELETE_ALL, AdimManagementConstants.AMId, DbType.String, string.Join(',',  aMIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
