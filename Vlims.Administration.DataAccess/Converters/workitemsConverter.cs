//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolicySummary.DMS.Services
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using PolicySummary.DMS.Entities;
    using Vlims.Common;
    using Vlims.DMS.Entities;



    // Comment
    public static class workitemsConverter
    {

        public static List<workitems> SetAllworkitems(DataSet dataset)
        {
            try
            {
                List<workitems> result = new List<workitems>();
                workitems workitemsData;
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; (i < dataset.Tables[0].Rows.Count); i = (i + 1))
                    {
                        DataRow row = dataset.Tables[0].Rows[i];
                        workitemsData = new workitems();
                        workitemsData.WITId = DatatypeConverter.SetIntValue(row[workitemsConstants.WITId.Trim('@')]);
                        workitemsData.TaskType = Convert.ToString(row[workitemsConstants.TaskType.Trim('@')]);
                        workitemsData.TaskName = Convert.ToString(row[workitemsConstants.TaskName.Trim('@')]);
                        workitemsData.Stage = Convert.ToString(row[workitemsConstants.Stage.Trim('@')]);
                        workitemsData.AssignedToGroup = Convert.ToString(row[workitemsConstants.AssignedToGroup.Trim('@')]);
                        workitemsData.InitiatedOn = Convert.ToString(row[workitemsConstants.InitiatedOn.Trim('@')]);
                        workitemsData.InitiatedBy = Convert.ToString(row[workitemsConstants.InitiatedBy.Trim('@')]);
                        workitemsData.Status = Convert.ToString(row[workitemsConstants.Status.Trim('@')]);
                        workitemsData.DueDate = Convert.ToString(row[workitemsConstants.DueDate.Trim('@')]);
                        workitemsData.CreatedBy = Convert.ToString(row[workitemsConstants.CreatedBy.Trim('@')]);
                        workitemsData.CreatedDate = DatatypeConverter.SetDateTime(row[workitemsConstants.CreatedDate.Trim('@')]);
                        workitemsData.ModifiedBy = Convert.ToString(row[workitemsConstants.ModifiedBy.Trim('@')]);
                        workitemsData.ModifiedDate = DatatypeConverter.SetDateTime(row[workitemsConstants.ModifiedDate.Trim('@')]);
                        workitemsData.ReferenceId = DatatypeConverter.SetIntValue(row[workitemsConstants.ReferenceId.Trim('@')]);
                        workitemsData.ActionType = Convert.ToString(row[workitemsConstants.ActionType.Trim('@')]);
                        if (row[workitemsConstants.IsCompleted.Trim('@')] != DBNull.Value)
                            workitemsData.IsCompleted = Convert.ToBoolean(row[workitemsConstants.IsCompleted.Trim('@')]);
                        result.Add(workitemsData);
                    }
                }
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public static workitems Setworkitems(DataSet dataset)
        {
            var result = SetAllworkitems(dataset);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }
    }
}
