//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Administration.DataAccess
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Vlims.Administration.Entities;
    using Vlims.Common;
    using System.Collections;
    using System.Xml.Serialization;



    // Comment
    public static class UserGroupConfigurationConverter
    {

        public static List<UserGroupConfiguration> SetAllUserGroupConfiguration(DataSet dataset, bool fromprep = false)
        {
            try
            {
                List<UserGroupConfiguration> result = new List<UserGroupConfiguration>();
                UserGroupConfiguration userGroupConfigurationData; bool islist;
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    islist = dataset.Tables[0].Rows.Count > 1;
                    for (int i = 0; (i < dataset.Tables[0].Rows.Count); i = (i + 1))
                    {
                        DataRow row = dataset.Tables[0].Rows[i];
                        userGroupConfigurationData = new UserGroupConfiguration();
                        userGroupConfigurationData.Ugcid = Convert.ToString(row[UserGroupConfigurationConstants.Ugcid.Trim('@')]);
                        userGroupConfigurationData.Usermanagementid = Convert.ToString(row[UserGroupConfigurationConstants.Usermanagementid.Trim('@')]);
                        userGroupConfigurationData.usergroupname = Convert.ToString(row[UserGroupConfigurationConstants.Usergroupname.Trim('@')]);
                        userGroupConfigurationData.userstring = Convert.ToString(row[UserGroupConfigurationConstants.Users.Trim('@')]);
                        userGroupConfigurationData.code = Convert.ToString(row[UserGroupConfigurationConstants.Code.Trim('@')]);
                        userGroupConfigurationData.totalusers = Convert.ToString(row[UserGroupConfigurationConstants.Totalusers.Trim('@')]);
                        userGroupConfigurationData.createdBy = Convert.ToString(row[UserGroupConfigurationConstants.CreatedBy.Trim('@')]);
                        userGroupConfigurationData.createdDate = DatatypeConverter.SetDateTime(row[UserGroupConfigurationConstants.CreatedDate.Trim('@')]);
                        userGroupConfigurationData.modifiedBy = Convert.ToString(row[UserGroupConfigurationConstants.ModifiedBy.Trim('@')]);
                        //userGroupConfigurationData.Status = Convert.ToString(row[UserGroupConfigurationConstants.Status.Trim('@')]);
                        userGroupConfigurationData.modifiedDate = DatatypeConverter.SetDateTime(row[UserGroupConfigurationConstants.ModifiedDate.Trim('@')]);
                        if (!islist || fromprep)
                        {
                            string docvalue = Convert.ToString(row[UserGroupConfigurationConstants.document.Trim('@')]);
                            if (!string.IsNullOrEmpty(docvalue))
                            {
                                // Create an XmlSerializer for the Person type
                                var serializer1 = new XmlSerializer(typeof(UserGroupConfiguration));
                                // Create a StringReader to read the XML data
                                var reader = new StringReader(Convert.ToString(row[UserGroupConfigurationConstants.document.Trim('@')]));
                                // Deserialize the XML data back to a Person object
                                var person = (UserGroupConfiguration)serializer1.Deserialize(reader);
                                userGroupConfigurationData.users = person.users;
                                userGroupConfigurationData.userstring = string.Join(",", person.users.Select(o => o.UserID));
                            }
                        }
                        result.Add(userGroupConfigurationData);
                    }
                }
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public static UserGroupConfiguration SetUserGroupConfiguration(DataSet dataset)
        {
            var result = SetAllUserGroupConfiguration(dataset);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }

        public static DataTable SetDataSet(List<UserGroupConfiguration> userGroupConfigurations)
        {
            DataTable dataTable = new DataTable();
            DataRow row = null;
            SetDataTableColumns(dataTable);
            try
            {
                if (userGroupConfigurations != null && userGroupConfigurations.Count > 0)
                {
                    for (int i = 0; (i < userGroupConfigurations.Count); i = (i + 1))
                    {
                        row = dataTable.NewRow();
                        row[UserGroupConfigurationConstants.Ugcid.Trim()] = userGroupConfigurations[i].Ugcid;
                        row[UserGroupConfigurationConstants.Usermanagementid.Trim()] = userGroupConfigurations[i].Usermanagementid;
                        row[UserGroupConfigurationConstants.Usergroupname.Trim()] = userGroupConfigurations[i].usergroupname;
                        row[UserGroupConfigurationConstants.Code.Trim()] = userGroupConfigurations[i].code;
                        row[UserGroupConfigurationConstants.Users.Trim()] = userGroupConfigurations[i].users;
                        row[UserGroupConfigurationConstants.Totalusers.Trim()] = userGroupConfigurations[i].totalusers;
                        row[UserGroupConfigurationConstants.CreatedBy.Trim()] = userGroupConfigurations[i].createdBy;
                        row[UserGroupConfigurationConstants.CreatedDate.Trim()] = userGroupConfigurations[i].createdDate;
                        row[UserGroupConfigurationConstants.ModifiedBy.Trim()] = userGroupConfigurations[i].modifiedBy;
                        row[UserGroupConfigurationConstants.ModifiedDate.Trim()] = userGroupConfigurations[i].modifiedDate;
                        dataTable.Rows.Add(row);
                    }
                }
                return dataTable;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        private static void SetDataTableColumns(DataTable dataTable)
        {
            dataTable.TableName = "UT_UserGroupConfiguration_PSY";
            dataTable.Columns.Add(UserGroupConfigurationConstants.Ugcid.Trim());
            dataTable.Columns.Add(UserGroupConfigurationConstants.Usermanagementid.Trim());
            dataTable.Columns.Add(UserGroupConfigurationConstants.Usergroupname.Trim());
            dataTable.Columns.Add(UserGroupConfigurationConstants.Code.Trim());
            dataTable.Columns.Add(UserGroupConfigurationConstants.Users.Trim());
            dataTable.Columns.Add(UserGroupConfigurationConstants.Totalusers.Trim());
            dataTable.Columns.Add(UserGroupConfigurationConstants.CreatedBy.Trim());
            dataTable.Columns.Add(UserGroupConfigurationConstants.CreatedDate.Trim());
            dataTable.Columns.Add(UserGroupConfigurationConstants.ModifiedBy.Trim());
            dataTable.Columns.Add(UserGroupConfigurationConstants.ModifiedDate.Trim());
        }
    }
}
