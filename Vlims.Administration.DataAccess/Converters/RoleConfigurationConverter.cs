//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Administration.DataAccess
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Vlims.Administration.Entities;
    using Vlims.Common;



    // Comment
    public static class RoleConfigurationConverter
    {
        
        public static List<RoleConfiguration> SetAllRoleConfiguration(DataSet dataset)
        {
            try
            {
                List<RoleConfiguration> result = new List<RoleConfiguration>();
                RoleConfiguration roleConfigurationData;
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; (i < dataset.Tables[0].Rows.Count); i = (i + 1))
                    {
                        DataRow row = dataset.Tables[0].Rows[i];
                        roleConfigurationData = new RoleConfiguration();
                        roleConfigurationData.ROCFId = Convert.ToString(row[RoleConfigurationConstants.ROCFId.Trim('@')]);
                        roleConfigurationData.HierarchyManagementId = Convert.ToString(row[RoleConfigurationConstants.HierarchyManagementId.Trim('@')]);
                        roleConfigurationData.Role = Convert.ToString(row[RoleConfigurationConstants.Role.Trim('@')]);
                        roleConfigurationData.Department = Convert.ToString(row[RoleConfigurationConstants.Department.Trim('@')]);
                        roleConfigurationData.Comments = Convert.ToString(row[RoleConfigurationConstants.Comments.Trim('@')]);
                        roleConfigurationData.CreatedBy = Convert.ToString(row[RoleConfigurationConstants.CreatedBy.Trim('@')]);
                        roleConfigurationData.CreatedDate = DatatypeConverter.SetDateTime(row[RoleConfigurationConstants.CreatedDate.Trim('@')]);
                        roleConfigurationData.ModifiedBy = Convert.ToString(row[RoleConfigurationConstants.ModifiedBy.Trim('@')]);
                        roleConfigurationData.ModifiedDate = DatatypeConverter.SetDateTime(row[RoleConfigurationConstants.ModifiedDate.Trim('@')]);
                        result.Add(roleConfigurationData);
                    }
                }
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static RoleConfiguration SetRoleConfiguration(DataSet dataset)
        {
            var result = SetAllRoleConfiguration(dataset);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }
        
        public static DataTable SetDataSet(List<RoleConfiguration> roleConfigurations)
        {
            DataTable dataTable = new DataTable();
            DataRow row = null;
            SetDataTableColumns(dataTable);
            try
            {
                if (roleConfigurations != null && roleConfigurations.Count > 0)
                {
                    for (int i = 0; (i < roleConfigurations.Count); i = (i + 1))
                    {
                        row = dataTable.NewRow();
                        row[RoleConfigurationConstants.ROCFId.Trim()] = roleConfigurations[i].ROCFId;
                        row[RoleConfigurationConstants.HierarchyManagementId.Trim()] = roleConfigurations[i].HierarchyManagementId;
                        row[RoleConfigurationConstants.Role.Trim()] = roleConfigurations[i].Role;
                        row[RoleConfigurationConstants.Department.Trim()] = roleConfigurations[i].Department;
                        row[RoleConfigurationConstants.Comments.Trim()] = roleConfigurations[i].Comments;
                        row[RoleConfigurationConstants.CreatedBy.Trim()] = roleConfigurations[i].CreatedBy;
                        row[RoleConfigurationConstants.CreatedDate.Trim()] = roleConfigurations[i].CreatedDate;
                        row[RoleConfigurationConstants.ModifiedBy.Trim()] = roleConfigurations[i].ModifiedBy;
                        row[RoleConfigurationConstants.ModifiedDate.Trim()] = roleConfigurations[i].ModifiedDate;
                        dataTable.Rows.Add(row);
                    }
                }
                return dataTable;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        private static void SetDataTableColumns(DataTable dataTable)
        {
            dataTable.TableName = "UT_RoleConfiguration_PSY";
            dataTable.Columns.Add(RoleConfigurationConstants.ROCFId.Trim());
            dataTable.Columns.Add(RoleConfigurationConstants.HierarchyManagementId.Trim());
            dataTable.Columns.Add(RoleConfigurationConstants.Role.Trim());
            dataTable.Columns.Add(RoleConfigurationConstants.Department.Trim());
            dataTable.Columns.Add(RoleConfigurationConstants.Comments.Trim());
            dataTable.Columns.Add(RoleConfigurationConstants.CreatedBy.Trim());
            dataTable.Columns.Add(RoleConfigurationConstants.CreatedDate.Trim());
            dataTable.Columns.Add(RoleConfigurationConstants.ModifiedBy.Trim());
            dataTable.Columns.Add(RoleConfigurationConstants.ModifiedDate.Trim());
        }
    }
}
