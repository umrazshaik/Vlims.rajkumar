//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Administration.DataAccess
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Vlims.Common;
    using Vlims.Administration.Entities;



    // Comment
    public static class UserManagementData 
    {
        
      
        public static DataSet GetAllUserManagement(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserManagementConstants.USP_UserManagement_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static DataSet GetUserManagementByUMId(string uMId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(UserManagementConstants.USP_UserManagement_PSY_GET, UserManagementConstants.UMId, DbType.Int32, uMId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool SaveUserManagement(UserManagement userManagement)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.AdminManagerId, Value = userManagement.AdminManagerId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.UserConfiguration, Value = userManagement.UserConfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.Status, Value = userManagement.Status });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.UserGroupConfiguration, Value = userManagement.UserGroupConfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.AuditLogs, Value = userManagement.AuditLogs });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.CreatedBy, Value = userManagement.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.ModifiedBy, Value = userManagement.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(UserManagementConstants.USP_UserManagement_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool UpdateUserManagement(UserManagement userManagement)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.UMId, Value = userManagement.UMId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.AdminManagerId, Value = userManagement.AdminManagerId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.UserConfiguration, Value = userManagement.UserConfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.Status, Value = userManagement.Status });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.UserGroupConfiguration, Value = userManagement.UserGroupConfiguration });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.AuditLogs, Value = userManagement.AuditLogs });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = UserManagementConstants.ModifiedBy, Value = userManagement.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(UserManagementConstants.USP_UserManagement_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteUserManagementByUMId(string uMId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(UserManagementConstants.USP_UserManagement_PSY_DELETE, UserManagementConstants.UMId, DbType.Int32, uMId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteAllUserManagement(List<int> uMIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(UserManagementConstants.USP_UserManagement_PSY_DELETE_ALL, UserManagementConstants.UMId, DbType.String, string.Join(',',  uMIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
