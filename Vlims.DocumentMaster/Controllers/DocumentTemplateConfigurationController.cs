//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Microsoft.AspNetCore.Mvc;
    using Vlims.Common;
    using Vlims.DocumentMaster.Entities;
    using Vlims.DocumentMaster.Manager;

    /// <summary>
    /// Comment
    /// </summary>
    [ApiController()]
    [Route("api/documenttemplateconfiguration")]
    public class DocumentTemplateConfigurationController : ControllerBase
    {
        
        private readonly IDocumentTemplateConfigurationService documentTemplateConfigurationService;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="documentTemplateConfigurationService"></param>
        public DocumentTemplateConfigurationController(IDocumentTemplateConfigurationService documentTemplateConfigurationService)
        {
            this.documentTemplateConfigurationService = documentTemplateConfigurationService;
        }

        /// <summary>
        /// This method is used to Get List of DocumentTemplateConfiguration
        /// </summary>
        /// <param name="requestContext"></param>
        [HttpPost("getalldoctemplate")]
        public ActionResult GetAllDocumentTemplateConfiguration([FromQuery] RequestContext requestContext)
        {
            var result = documentTemplateConfigurationService.GetAllDocumentTemplateConfiguration(requestContext);
            return Ok(result);
        }
        
        /// <summary>
        /// This method is used to Get DocumentTemplateConfiguration By Id dTID
        /// </summary>
        /// <param name="dTID"></param>
        [HttpGet("getbyId")]
        public ActionResult<DocumentTemplateConfiguration> GetDocumentTemplateConfigurationByDTID(int dTID)
        {
            var result = documentTemplateConfigurationService.GetDocumentTemplateConfigurationByDTID(dTID);
            return result;
        }
        /// <summary>
        /// This method is used to Get DocumentTemplateConfiguration By Name
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        [HttpGet("getbyName")]
        public ActionResult GetDocumentTemplateConfigurationByName(string name)
        {
            DocumentTemplateConfiguration responseContext = new DocumentTemplateConfiguration();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber = 1;
            requestContext.PageSize = 50;
            var result = documentTemplateConfigurationService.GetAllDocumentTemplateConfiguration(requestContext);
            if (result != null)
            {
                responseContext = result.Response.FirstOrDefault(o => o.Templatename.Equals(name, StringComparison.InvariantCultureIgnoreCase));
            }
            return Ok(responseContext);
        }
        /// <summary>
        /// This Method is used to Save DocumentTemplateConfiguration
        /// </summary>
        /// <param name="documentTemplateConfiguration"></param>
        [HttpPost("savedocumenttemplateconfiguration")]
        public ActionResult<System.Boolean> SaveDocumentTemplateConfiguration(DocumentTemplateConfiguration documentTemplateConfiguration)
        {
            var serializer = new XmlSerializer(typeof(DocumentTemplateConfiguration));
            // Create a StringWriter to hold the XML data
            var writer = new StringWriter();

            // Serialize the Person object to XML and write it to the StringWriter
            serializer.Serialize(writer, documentTemplateConfiguration);

            // Get the XML string from the StringWriter
            string xmlString = writer.ToString();
            var result = documentTemplateConfigurationService.SaveDocumentTemplateConfiguration(documentTemplateConfiguration);
            // Create an XmlSerializer for the Person type
            var serializer1 = new XmlSerializer(typeof(DocumentTemplateConfiguration));

            // Create a StringReader to read the XML data
            var reader = new StringReader(xmlString);

            // Deserialize the XML data back to a Person object
            var person = (DocumentTemplateConfiguration)serializer.Deserialize(reader);
            return result;
        }
        
        /// <summary>
        /// This Method is used to update DocumentTemplateConfiguration
        /// </summary>
        /// <param name="documentTemplateConfiguration"></param>
        [HttpPost("updatedocumenttemplateconfiguration")]
        public ActionResult<System.Boolean> UpdateDocumentTemplateConfiguration(DocumentTemplateConfiguration documentTemplateConfiguration)
        {
            var serializer = new XmlSerializer(typeof(DocumentTemplateConfiguration));
            // Create a StringWriter to hold the XML data
            var writer = new StringWriter();
            // Serialize the Person object to XML and write it to the StringWriter
            serializer.Serialize(writer, documentTemplateConfiguration);
            // Get the XML string from the StringWriter
            string xmlString = writer.ToString();
            var result = documentTemplateConfigurationService.UpdateDocumentTemplateConfiguration(documentTemplateConfiguration);
            // Create an XmlSerializer for the Person type
            var serializer1 = new XmlSerializer(typeof(DocumentTemplateConfiguration));
            // Create a StringReader to read the XML data
            var reader = new StringReader(xmlString);
            // Deserialize the XML data back to a Person object
            var person = (DocumentTemplateConfiguration)serializer.Deserialize(reader);
            return result;            
        }
        
        /// <summary>
        /// This Method is used to Delete DocumentTemplateConfiguration By Id dTID
        /// </summary>
        /// <param name="dTID"></param>
        [HttpDelete("{dTID}")]
        public ActionResult<bool> DeleteDocumentTemplateConfigurationByDTID(int dTID)
        {
            var result = documentTemplateConfigurationService.DeleteDocumentTemplateConfigurationByDTID(dTID);
            return result;
        }
        
        /// <summary>
        /// This Method is used to Delete DocumentTemplateConfiguration By Multiple ids dTIDs
        /// </summary>
        /// <param name="dTIDs"></param>
        [HttpDelete("deleteAll")]
        public ActionResult<bool> DeleteAllDocumentTemplateConfiguration(List<int> dTIDs)
        {
            var result = documentTemplateConfigurationService.DeleteAllDocumentTemplateConfiguration(dTIDs);
            return result;
        }
    }
}
