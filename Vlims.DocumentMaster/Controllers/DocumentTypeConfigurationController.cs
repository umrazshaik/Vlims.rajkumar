//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.Controllers
{
    using System.Collections.Generic;
    using System.Data;
    using Microsoft.AspNetCore.Mvc;
    using Vlims.Common;
    using Vlims.DocumentMaster.Entities;
    using Vlims.DocumentMaster.Manager;

    /// <summary>
    /// Comment
    /// </summary>
    [ApiController()]
    [Route("api/documenttypeconfiguration")]
    public class DocumentTypeConfigurationController : ControllerBase
    {
        
        private readonly IDocumentTypeConfigurationService documentTypeConfigurationService;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="documentTypeConfigurationService"></param>
        public DocumentTypeConfigurationController(IDocumentTypeConfigurationService documentTypeConfigurationService)
        {
            this.documentTypeConfigurationService = documentTypeConfigurationService;
        }
        
        /// <summary>
        /// This method is used to Get List of DocumentTypeConfiguration
        /// </summary>
        /// <param name="requestContext"></param>
        [HttpPost("getalldoctypeconfig")]
        public ActionResult GetAllDocumentTypeConfiguration([FromQuery] RequestContext requestContext)
        {
            var result = documentTypeConfigurationService.GetAllDocumentTypeConfiguration(requestContext);
            return Ok(result);
        }
        
        /// <summary>
        /// This method is used to Get DocumentTypeConfiguration By Id dTCId
        /// </summary>
        /// <param name="dTCId"></param>
        [HttpGet("getbyId")]
        public ActionResult<DocumentTypeConfiguration> GetDocumentTypeConfigurationByDTCId(int dTCId)
        {
            var result = documentTypeConfigurationService.GetDocumentTypeConfigurationByDTCId(dTCId);
            return result;
        }
        /// <summary>
        /// This method is used to Get DocumentTypeConfiguration By Name
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        [HttpGet("getbyName")]
        public ActionResult GetDocumentTypeConfigurationByName(string name)
        {
            DocumentTypeConfiguration responseContext=new DocumentTypeConfiguration();
            RequestContext requestContext = new RequestContext();
            requestContext.PageNumber = 1;
            requestContext.PageSize = 50;
            var result = documentTypeConfigurationService.GetAllDocumentTypeConfiguration(requestContext);
            if (result != null)
            {
                responseContext = result.Response.FirstOrDefault(o => o.Documenttypename.Equals(name, StringComparison.InvariantCultureIgnoreCase));
            }
            return Ok(responseContext);
        }

        /// <summary>
        /// This Method is used to Save DocumentTypeConfiguration
        /// </summary>
        /// <param name="documentTypeConfiguration"></param>
        [HttpPost("savedocumenttypeconfiguration")]
        public ActionResult<System.Boolean> SaveDocumentTypeConfiguration(DocumentTypeConfiguration documentTypeConfiguration)
        {
            var result = documentTypeConfigurationService.SaveDocumentTypeConfiguration(documentTypeConfiguration);
            return result;
        }
        
        /// <summary>
        /// This Method is used to update DocumentTypeConfiguration
        /// </summary>
        /// <param name="documentTypeConfiguration"></param>
        [HttpPost("updatedocumenttypeconfiguration")]
        public ActionResult<System.Boolean> UpdateDocumentTypeConfiguration(DocumentTypeConfiguration documentTypeConfiguration)
        {
            var result = documentTypeConfigurationService.UpdateDocumentTypeConfiguration(documentTypeConfiguration);
            return result;
        }
        
        /// <summary>
        /// This Method is used to Delete DocumentTypeConfiguration By Id dTCId
        /// </summary>
        /// <param name="dTCId"></param>
        [HttpDelete("{dTCId}")]
        public ActionResult<bool> DeleteDocumentTypeConfigurationByDTCId(int dTCId)
        {
            var result = documentTypeConfigurationService.DeleteDocumentTypeConfigurationByDTCId(dTCId);
            return result;
        }
        
        /// <summary>
        /// This Method is used to Delete DocumentTypeConfiguration By Multiple ids dTCIds
        /// </summary>
        /// <param name="dTCIds"></param>
        [HttpDelete("deleteAll")]
        public ActionResult<bool> DeleteAllDocumentTypeConfiguration(List<int> dTCIds)
        {
            var result = documentTypeConfigurationService.DeleteAllDocumentTypeConfiguration(dTCIds);
            return result;
        }
    }
}
