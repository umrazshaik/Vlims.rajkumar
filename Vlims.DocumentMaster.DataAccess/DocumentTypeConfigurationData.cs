//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.DocumentMaster.DataAccess
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Vlims.DocumentMaster.Entities;
    using Vlims.Common;


    // Comment
    public  class DocumentTypeConfigurationData 
    {
        
        
        
       
        
        public static DataSet GetAllDocumentTypeConfiguration(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentMaster.Entities.DocumentTypeConfigurationConstants.USP_DocumentTypeConfiguration_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static DataSet GetDocumentTypeConfigurationByDTCId(int dTCId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentTypeConfigurationConstants.USP_DocumentTypeConfiguration_PSY_GET, DocumentTypeConfigurationConstants.DTCId, DbType.Int32, dTCId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool SaveDocumentTypeConfiguration(DocumentTypeConfiguration documentTypeConfiguration)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.DocumentMasterId, Value = documentTypeConfiguration.DocumentMasterId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.Documenttypename, Value = documentTypeConfiguration.Documenttypename });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.documenttypeprefix, Value = documentTypeConfiguration.documenttypeprefix });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.Description, Value = documentTypeConfiguration.Description });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.Assigntodepartment, Value = documentTypeConfiguration.Assigntodepartment });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.CreatedBy, Value = documentTypeConfiguration.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.ModifiedBy, Value = documentTypeConfiguration.ModifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.Status_PSY, Value = "Active" });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentTypeConfigurationConstants.USP_DocumentTypeConfiguration_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool UpdateDocumentTypeConfiguration(DocumentTypeConfiguration documentTypeConfiguration)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.DTCId, Value = documentTypeConfiguration.DTCId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.DocumentMasterId, Value = documentTypeConfiguration.DocumentMasterId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.Documenttypename, Value = documentTypeConfiguration.Documenttypename });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.documenttypeprefix, Value = documentTypeConfiguration.documenttypeprefix });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.Description, Value = documentTypeConfiguration.Description });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.Assigntodepartment, Value = documentTypeConfiguration.Assigntodepartment });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.ModifiedBy, Value = documentTypeConfiguration.ModifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentTypeConfigurationConstants.Status_PSY, Value = documentTypeConfiguration.Status });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentTypeConfigurationConstants.USP_DocumentTypeConfiguration_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteDocumentTypeConfigurationByDTCId(int dTCId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentTypeConfigurationConstants.USP_DocumentTypeConfiguration_PSY_DELETE, DocumentTypeConfigurationConstants.DTCId, DbType.Int32, dTCId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteAllDocumentTypeConfiguration(List<int> dTCIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentTypeConfigurationConstants.USP_DocumentTypeConfiguration_PSY_DELETE_ALL, DocumentTypeConfigurationConstants.DTCId, DbType.String, string.Join(',',  dTCIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
