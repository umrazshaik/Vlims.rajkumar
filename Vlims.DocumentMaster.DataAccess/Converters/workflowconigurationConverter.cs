//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.DocumentMaster.DataAccess
{
    using System;
    using System.Linq;
    using System.Data;
    using System.Collections.Generic;
    using Vlims.Common;
    using Vlims.DocumentMaster.Entities;
    using System.Xml.Serialization;


    // Comment
    public static class workflowconigurationConverter
    {

        public static List<workflowconiguration> SetAllworkflowconiguration(DataSet dataset)
        {
            try
            {
                List<workflowconiguration> result = new List<workflowconiguration>();
                workflowconiguration workflowconigurationData; bool islist;
                if (dataset != null && dataset.Tables.Count > 0 && dataset.Tables[0].Rows.Count > 0)
                {
                    islist = dataset.Tables[0].Rows.Count > 1;
                    for (int i = 0; (i < dataset.Tables[0].Rows.Count); i = (i + 1))
                    {
                        DataRow row = dataset.Tables[0].Rows[i];
                        workflowconigurationData = new workflowconiguration();
                        workflowconigurationData.WFCId = Convert.ToString(row[workflowconigurationConstants.WFCId.Trim('@')]);
                        workflowconigurationData.DocumentMasterId = Convert.ToString(row[workflowconigurationConstants.DocumentMasterId.Trim('@')]);
                        workflowconigurationData.workflowName = Convert.ToString(row[workflowconigurationConstants.workflowName_PSY.Trim('@')]);
                        workflowconigurationData.code = Convert.ToString(row[workflowconigurationConstants.code.Trim('@')]);
                        workflowconigurationData.documentstage = Convert.ToString(row[workflowconigurationConstants.documentstage.Trim('@')]);
                        workflowconigurationData.documenttype = Convert.ToString(row[workflowconigurationConstants.documenttype.Trim('@')]);
                        workflowconigurationData.departments = Convert.ToString(row[workflowconigurationConstants.department.Trim('@')]);
                        workflowconigurationData.reviewsCount = DatatypeConverter.SetIntValue(row[workflowconigurationConstants.reviewsCount.Trim('@')]);
                        workflowconigurationData.approvalsCount = DatatypeConverter.SetIntValue(row[workflowconigurationConstants.approvalsCount.Trim('@')]);
                        workflowconigurationData.CreatedBy = Convert.ToString(row[workflowconigurationConstants.CreatedBy.Trim('@')]);
                        workflowconigurationData.CreatedDate = DatatypeConverter.SetDateTime(row[workflowconigurationConstants.CreatedDate.Trim('@')]);
                        workflowconigurationData.ModifiedBy = Convert.ToString(row[workflowconigurationConstants.ModifiedBy.Trim('@')]);
                        workflowconigurationData.ModifiedDate = DatatypeConverter.SetDateTime(row[workflowconigurationConstants.ModifiedDate.Trim('@')]);
                        workflowconigurationData.ModifiedBy = Convert.ToString(row[workflowconigurationConstants.ModifiedBy.Trim('@')]);
                        workflowconigurationData.Status = Convert.ToString(row[workflowconigurationConstants.Status.Trim('@')]);
                        if (!islist)
                        {
                            string docvalue = Convert.ToString(row["Document_PSY"]);
                            if (!string.IsNullOrEmpty(docvalue))
                            {
                                // Create an XmlSerializer for the Person type
                                var serializer1 = new XmlSerializer(typeof(workflowconiguration));
                                // Create a StringReader to read the XML data
                                var reader = new StringReader(Convert.ToString(row["Document_PSY"]));
                                // Deserialize the XML data back to a Person object
                                var person = (workflowconiguration)serializer1.Deserialize(reader);
                                workflowconigurationData.reviewsType = person.reviewsType;
                                workflowconigurationData.approvalsType = person.approvalsType;
                                workflowconigurationData.reviewers = person.reviewers;
                                workflowconigurationData.approvals = person.approvals;
                                workflowconigurationData.reviewersGroup = person.reviewersGroup;
                                workflowconigurationData.approvalsGroup = person.approvalsGroup;
                                workflowconigurationData.department=person.department;
                            }
                        }
                        result.Add(workflowconigurationData);
                    }
                }
                return result;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }

        public static workflowconiguration Setworkflowconiguration(DataSet dataset)
        {
            var result = SetAllworkflowconiguration(dataset);
            if (result.Count > 0)
            {
                return result.FirstOrDefault();
            }
            return null;
        }
    }
}
