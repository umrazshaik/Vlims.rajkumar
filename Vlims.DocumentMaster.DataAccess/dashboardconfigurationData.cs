//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.DocumentMaster.DataAccess
{
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Vlims.DocumentMaster.Entities;
    using Vlims.Common;


    // Comment
    public  class dashboardconfigurationData 
    {
        
        public static DataSet GetAlldashboardconfiguration(RequestContext requestContext)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(dashboardconfigurationConstants.USP_dashboardconfiguration_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static DataSet GetdashboardconfigurationByDCId(int dCId)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(dashboardconfigurationConstants.USP_dashboardconfiguration_PSY_GET, dashboardconfigurationConstants.DCId, DbType.Int32, dCId, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool Savedashboardconfiguration(dashboardconfiguration dashboardconfiguration)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = dashboardconfigurationConstants.DocumentMasterId, Value = dashboardconfiguration.DocumentMasterId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = dashboardconfigurationConstants.CreatedBy, Value = dashboardconfiguration.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = dashboardconfigurationConstants.ModifiedBy, Value = dashboardconfiguration.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(dashboardconfigurationConstants.USP_dashboardconfiguration_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool Updatedashboardconfiguration(dashboardconfiguration dashboardconfiguration)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = dashboardconfigurationConstants.DCId, Value = dashboardconfiguration.DCId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = dashboardconfigurationConstants.DocumentMasterId, Value = dashboardconfiguration.DocumentMasterId });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = dashboardconfigurationConstants.ModifiedBy, Value = dashboardconfiguration.ModifiedBy });
                Object result = dataAccessHelper.ExecuteStoredProcedure(dashboardconfigurationConstants.USP_dashboardconfiguration_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeletedashboardconfigurationByDCId(int dCId)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(dashboardconfigurationConstants.USP_dashboardconfiguration_PSY_DELETE, dashboardconfigurationConstants.DCId, DbType.Int32, dCId, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteAlldashboardconfiguration(List<int> dCIds)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(dashboardconfigurationConstants.USP_dashboardconfiguration_PSY_DELETE_ALL, dashboardconfigurationConstants.DCId, DbType.String, string.Join(',',  dCIds), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
