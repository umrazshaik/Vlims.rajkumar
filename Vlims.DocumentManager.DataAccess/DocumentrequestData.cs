//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.DocumentManager.DataAccess
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Vlims.Common;
    using Vlims.DMS.Entities;

    //using PolicySummary.Common.Entities;
    //using PolicySummary.Sheet1.Entities;
    //using VAMLibrary.Core;
    //using VAMLibrary.Core.Common;


    // Comment
    public static class DocumentrequestData 
    {
      
        
        public static DataSet GetAllDocumentrequest(RequestContext requestContext)
        {
            try
            {
                requestContext.PageNumber = 1;
                requestContext.PageSize = 50;
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static DataSet GetDocumentrequestByDRID(int dRID)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_GET, DocumentrequestConstants.DRID, DbType.Int32, dRID, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool SaveDocumentrequest(Documentrequest documentrequest)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.documentmanagerid, Value = documentrequest.documentmanagerid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.documenttype, Value = documentrequest.documenttype });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.department, Value = documentrequest.department });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.Purpose, Value = documentrequest.Purpose });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = DocumentrequestConstants.ApprovalsCount, Value = documentrequest.ApprovalsCount });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.AssigntoGroup, Value = documentrequest.AssigntoGroup });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.CreatedBy, Value = documentrequest.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.ModifiedBy, Value = documentrequest.ModifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.Status, Value = documentrequest.Status });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.Workflow, Value = documentrequest.Workflow });
                //sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.Reviwers, Value = documentrequest.Reviwers });
                //sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.Approvals, Value = documentrequest.Approvals });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool UpdateDocumentrequest(Documentrequest documentrequest)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.DRID, Value = documentrequest.DRID });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.documentmanagerid, Value = documentrequest.documentmanagerid });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.documenttype, Value = documentrequest.documenttype });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.department, Value = documentrequest.department });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.Purpose, Value = documentrequest.Purpose });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = DocumentrequestConstants.ApprovalsCount, Value = documentrequest.ApprovalsCount });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.AssigntoGroup, Value = documentrequest.AssigntoGroup });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.ModifiedBy, Value = documentrequest.ModifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = DocumentrequestConstants.Status, Value = documentrequest.Status });
                Object result = dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteDocumentrequestByDRID(string dRID)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_DELETE, DocumentrequestConstants.DRID, DbType.Int32, dRID, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteAllDocumentrequest(List<int> dRIDs)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(DocumentrequestConstants.USP_Documentrequest_PSY_DELETE_ALL, DocumentrequestConstants.DRID, DbType.String, string.Join(',',  dRIDs), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
