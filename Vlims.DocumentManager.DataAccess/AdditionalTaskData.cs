//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vlims.DocumentManager.DataAccess
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Collections.Generic;
    using Newtonsoft.Json;    
    using Vlims.Common;
    using Vlims.DMS.Entities;


    // Comment
    public static class AdditionalTaskData
    {
        public static DataSet GetAllAdditionalTask(RequestContext requestContext)
        {
            try
            {
                requestContext.PageNumber = 1;
                requestContext.PageSize = 50;
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageNumber, Value = requestContext.PageNumber });
                sqlparms.Add(new SqlParameter { DbType = DbType.Int32, ParameterName = RequestContextConstants.PageSize, Value = requestContext.PageSize });
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(AdditionalTaskConstants.USP_AdditionalTask_PSY_GET_ALL, sqlparms, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static DataSet GetAdditionalTaskByATID(int aTID)
        {
            try
            {
                DataSet dataset = (DataSet)dataAccessHelper.ExecuteStoredProcedure(AdditionalTaskConstants.USP_AdditionalTask_PSY_GET, AdditionalTaskConstants.ATID, DbType.Int32, aTID, ExecutionType.Dataset);
                return dataset;
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool SaveAdditionalTask(AdditionalTask additionalTask)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.Int16, ParameterName = AdditionalTaskConstants.DocumentEffective_ID, Value = additionalTask.DocumentEffectiveID });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdditionalTaskConstants.CreatedBy, Value = additionalTask.CreatedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdditionalTaskConstants.ModifiedBy, Value = additionalTask.ModifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdditionalTaskConstants.Status_PSY, Value = additionalTask.Status });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdditionalTaskConstants.Version, Value = additionalTask.Version });
                sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = AdditionalTaskConstants.EffectiveDate, Value = additionalTask.EffectiveDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = AdditionalTaskConstants.reviewDate, Value = additionalTask.ReviewDate });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdditionalTaskConstants.Workflow, Value = additionalTask.Workflow });
                Object result = dataAccessHelper.ExecuteStoredProcedure(AdditionalTaskConstants.USP_AdditionalTask_PSY_INSERT, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool UpdateAdditionalTask(AdditionalTask additionalTask)
        {
            try
            {
                List<SqlParameter> sqlparms = new List<SqlParameter>();
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdditionalTaskConstants.ATID, Value = additionalTask.ATID });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdditionalTaskConstants.Status_PSY, Value = additionalTask.Status });
                //sqlparms.Add(new SqlParameter { DbType = DbType.Int16, ParameterName = AdditionalTaskConstants.DocumentEffective_ID, Value = additionalTask.DocumentEffectiveID });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdditionalTaskConstants.Version, Value = additionalTask.Version });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdditionalTaskConstants.ModifiedBy, Value = additionalTask.ModifiedBy });
                sqlparms.Add(new SqlParameter { DbType = DbType.String, ParameterName = AdditionalTaskConstants.Workflow, Value = additionalTask.Workflow });
                //sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = AdditionalTaskConstants.ModifiedDate, Value = additionalTask.ModifiedDate });
                //sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = AdditionalTaskConstants.EffectiveDate, Value = additionalTask.EffectiveDate });
                //sqlparms.Add(new SqlParameter { DbType = DbType.DateTime, ParameterName = AdditionalTaskConstants.reviewDate, Value = additionalTask.ReviewDate });
                Object result = dataAccessHelper.ExecuteStoredProcedure(AdditionalTaskConstants.USP_AdditionalTask_PSY_UPDATE, sqlparms, ExecutionType.Scalar);
                return (Convert.ToInt32(result) > 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteAdditionalTaskByATID(string aTID)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(AdditionalTaskConstants.USP_AdditionalTask_PSY_DELETE, AdditionalTaskConstants.ATID, DbType.Int32, aTID, ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
        
        public static bool DeleteAllAdditionalTask(List<int> aTIDs)
        {
            try
            {
                var result = dataAccessHelper.ExecuteStoredProcedure(AdditionalTaskConstants.USP_AdditionalTask_PSY_DELETE_ALL, AdditionalTaskConstants.ATID, DbType.String, string.Join(',',  aTIDs), ExecutionType.NonQuery);
                return (Convert.ToInt32(result) >= 0);
            }
            catch (System.Exception ex)
            {
                throw;
            }
        }
    }
}
